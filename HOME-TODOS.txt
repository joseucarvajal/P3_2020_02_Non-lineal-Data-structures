 ------------------ Deadline: thursday, August 20 -----------------------------
	1. To set up a new GitHub repository
	2. To create a new Eclipse project. To solve the following requirements:
		There are going to be a handful of students. Each student is going to have: name, payment.
		The system should be able to: 		
			1. To create a method: "getDiffAvg(....)" Difference between payment average and the student with the greatest payment value.
				Ej:
					Students:
						Pepito		2000
						Carlitos	500
						Miguelito	700
						Natalia		3500
						Jose		2000
						
					Avg: 1740
					Student with greatest payment: 3500
					
					Output:
						Difference between payment average and student with the greatest payment is: 1760
						
			2. To shape the stack trace to show the behavior for "getDiffAvg(...)" starting from the main(....) method.
				This shape, must be done in your own notebooks.
				Inside the newly JAVA project: to create a new folder with the screenshots taken out of your notebooks.
				
			3. Into screenshots folder: attach a screenshot of your program running.
						
	3. To upload the newly created project to GitHub.
	
	4. To create workspace to present (explain) your project.
	
	5. Download the project from GitHub and test it within the newly created workspace
	
------------------ Deadline: friday, August 28 -----------------------------
2. To solve following problemas by usign recursion:
	a) Create an algorithm to divide two numbers (a, b).
		Ej: 
			input
				a = 60, b = 15. 
			output
				4
	b) Calculate a pow b:
		Ej: 
			input
				a = 2, b = 3
			Output
				a pow b = 2 * 2 * 2 = 8
	c) N! (N factorial) is defined as follow:
		N! = 1*2*3*4*5...*N.
		Example:
			n = 5
			n! = 5 * 4 * 3 * 2 * 1 = 120
			n! = 120
			5! = 120
		Create a recursive function to solve n!.
	d) A function that adds all of the elements of an array
		Ej: arr = [1, 3, 4]
			result = 8
	e) Given an array, count even and odd numbers.
		Ej: 
			Input
				arr = [2, 7, 9, 13, 8]
			Onput
				even numbers count = 2
				odd numbers count = 3
				
------------------ Final project, deadline: September, saturday 12 -----------------------------
Solve following problems using recursion.

	1. Given a number check whether the number is prime or not
		A prime number is a number that could be divided by 1 and itself
		Ej 1. 
			Input
				n = 18
			Output
				No
		Ej 2.
			Input
				n = 17
			 Output
				Si
				
	2. Get the greatest element in an array
		Ej1:
			Input
				arr = [3, 7, 25, 13]
			Output
				greatest = 25
				
	3. Check whether an array is a palindrome value or not. Returns 1 if a[] is a palindrome, 0 otherwise
		Ej1:
			Input
				arr = [3, 5, 8, 5]
			Output
				0
		Ej2:
			Input
				arr = [5, 8, 5]
			Output
				1
		Ej3: 
			Input
				arr = []
			Output
				1
	
	4. Write a program to count the digits of a given number using recursion.
			Ej :
				Input 
					number : 50
				Output:
					2

	More exercises to practice
		https://www.w3resource.com/c-programming-exercises/recursion/index.php
	

	Constraints:
		1. Individual
		2. Attach the solution screenshot (analysis, design, design probe concept and program running), development = code.
		3. Upload to a new GitHub repository named "recursion-tecnique"
		4. Individual problems presentation
	
========================================== Second stage
------------------ Deadline: friday, October the 2nd -----------------------------	
1. Create a new GitHub repository called "sales-network-linked-lists"
2. Create a new Java project and solve following requirements by using custom linked list. It not allowed to use the native Java List classes.
	Requirements
		Get the balance according to a given seller
		Get total amount of balance within the network
		The seller with the largest balance
		The seller with the smallest balance
3. Create a newtork tree with at least 10 sellers
4. Attach screenshots with the results outcome.
5. This project must be versioned into the newly GitHub repository "sales-network-linked-lists"
